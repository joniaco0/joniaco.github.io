[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/CloseRush/index.html",
    "href": "posts/CloseRush/index.html",
    "title": "The ACC and Big Ten have",
    "section": "",
    "text": "The philosophy that you need to run the ball to win is one that is hotly debated in Sports Circles. But teams in the Big Ten and ACC conference have gotten away with winning games despite not rushing for 100 Yards. The difference between the two is that they’ve flipflopped positions in the past two years.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlogs &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\nsub100 &lt;- logs|&gt; filter(RushingYds &lt;= 100)\nsub100W &lt;- sub100 |&gt; filter(Outcome == \"W\")\ndata &lt;- sub100W |&gt; group_by(Season,Conference) |&gt; summarize(Wins = n())\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\nBigTen &lt;- data |&gt; filter(Conference == \"Big Ten Conference\")\nSEC &lt;- data |&gt; filter(Conference ==\"Southeastern Conference\")\nCUSA &lt;- data |&gt; filter(Conference ==\"Conference USA\")\nBig12 &lt;- data |&gt; filter(Conference ==\"Big 12 Conference\")\nInd &lt;- data |&gt; filter(Conference ==\"Independent\")\nMAC &lt;- data |&gt; filter(Conference ==\"Mid-American Conference\")\nPAC12 &lt;- data |&gt; filter(Conference ==\"Pac-12 Conference\", Conference == \"Pacific-12 Conference\")\nBigEast &lt;- data |&gt; filter(Conference ==\"Big East Conference\")\nSunBelt &lt;- data |&gt; filter(Conference ==\"Sun Belt Conference\")\nMWC &lt;- data |&gt; filter(Conference ==\"Mountain West Conference\")\nWAC &lt;- data |&gt; filter(Conference ==\"Western Athletic Conference\")\nACC &lt;- data |&gt; filter(Conference == \"Atlantic Coast Conference\")\nggplot(data) +\n  geom_line(data = SEC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = CUSA, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = Big12, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = Ind, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = MAC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = PAC12, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = BigEast, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = SunBelt, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = MWC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = WAC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_point(data = BigTen, aes(x = Season, y = Wins, color = \"Big Ten\")) +\n  geom_line(data = BigTen, aes(x = Season, y = Wins, color = \"Big Ten\")) +\n  geom_point(data = ACC, aes(x = Season, y = Wins, color = \"ACC\")) +\n  geom_line(data = ACC, aes(x = Season, y = Wins, color = \"ACC\")) +\n  \n  labs(title = \"The ACC and Big Ten have Flip-Flopped Winning Sub-100 Yard Rushing Wins\", \n       x = \"Season\", \n       y = \"Sub-100 Yard Rushing Wins\",\n       color = \"Conference\") +  # Label for the legend\n  scale_color_manual(values = c(\"Big Ten\" = \"blue\", \"ACC\" = \"red\")) +  # Custom colors for Big Ten and ACC\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWinning when rushing for less than 100 yards isn’t common. When we load in the data of Sub 100 Yard Rushing games, it’s not pretty, as expected, there were 5122 Sub-100 Yard rushing games since 2011. Only 1096 of them were wins. This comes out to a 21% win percentage, which is not very good.\n\n\nCode\nWins &lt;- sub100W |&gt; summarise(Count = n()) |&gt; pluck(1)\nTotal &lt;- sub100  |&gt; summarise(Count = n()) |&gt; pluck(1)\nWinpct &lt;- (Wins/Total)\nWinpct\n\n\n[1] 0.2139789\n\n\nIn the Big Ten, this is no exception, with a slightly better win percentage than the national average, the Big Ten had a little more than a half of a percentage point better when it came to Sub-100 Yard rushing wins.\n\n\nCode\nbigtensub &lt;- sub100 |&gt; filter(Conference == \"Big Ten Conference\")\nbigtenw &lt;- bigtensub |&gt; filter(Outcome == \"W\")\nBigWins &lt;- bigtenw |&gt; summarise(Count = n()) |&gt; pluck(1)\nBigTotal &lt;- bigtensub |&gt; summarise(Count = n()) |&gt; pluck(1)\nBigWinPct &lt;- BigWins/BigTotal\nBigWinPct\n\n\n[1] 0.2197232\n\n\nWell what teams get away with these performances? Surprisingly, the conference that has had the most amount of games with Sub-100 Yard Rushing is the Big Ten, the rough and tough conference that loves to run the ball according to fans. But when you look at wins after these performances, the ACC reigns supreme.\n\n\nCode\ntotalseasondata &lt;- sub100 |&gt; group_by(Conference)|&gt; summarize(Games = n())\ntotalseasondata |&gt; arrange(desc(Wins))\n\n\n# A tibble: 14 × 2\n   Conference                   Games\n   &lt;chr&gt;                        &lt;int&gt;\n 1 American Athletic Conference   395\n 2 Atlantic Coast Conference      559\n 3 Big 12 Conference              344\n 4 Big East Conference             60\n 5 Big Ten Conference             578\n 6 Conference USA                 576\n 7 Independent                    145\n 8 Mid-American Conference        515\n 9 Mountain West Conference       424\n10 Pac-12 Conference              457\n11 Pacific-12 Conference           45\n12 Southeastern Conference        509\n13 Sun Belt Conference            455\n14 Western Athletic Conference     60\n\n\nCode\nseasondata &lt;- sub100W |&gt; group_by(Conference)|&gt; summarize(Wins = n())\nseasondata |&gt; arrange(desc(Wins))\n\n\n# A tibble: 14 × 2\n   Conference                    Wins\n   &lt;chr&gt;                        &lt;int&gt;\n 1 Atlantic Coast Conference      150\n 2 Big Ten Conference             127\n 3 Pac-12 Conference              127\n 4 Southeastern Conference        121\n 5 Conference USA                  99\n 6 Mountain West Conference        96\n 7 American Athletic Conference    78\n 8 Big 12 Conference               78\n 9 Sun Belt Conference             75\n10 Mid-American Conference         73\n11 Independent                     26\n12 Big East Conference             17\n13 Pacific-12 Conference           16\n14 Western Athletic Conference     13\n\n\nBut when you look season by season, you can see a trend between the Big Ten and ACC Conference moving in different directions. The Big Ten was one of the worst teams in the country in getting wins from Sub-100 Rushing Yard games, with more games in 2011 than the ACC, yet only six wins. In that same year, the ACC had 16 wins, more than double that of the Big Ten. But over time, these conferences almost swapped places, with 2021 the most glaring change, as the Big Ten had 20 wins compared to the ACC’s 10.\n\n\nCode\ntotaldata &lt;- sub100 |&gt; group_by(Season,Conference) |&gt; summarize(Games = n()) |&gt; arrange((Season))\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\ndata &lt;- sub100W |&gt; group_by(Season,Conference) |&gt; summarize(Wins = n()) |&gt; arrange(Season)\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\n# Correct filtering for multiple conferences\ntotaldata |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\")\n\n\n# A tibble: 28 × 3\n# Groups:   Season [14]\n   Season Conference                Games\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    45\n 2   2011 Big Ten Conference           26\n 3   2012 Atlantic Coast Conference    50\n 4   2012 Big Ten Conference           27\n 5   2013 Atlantic Coast Conference    41\n 6   2013 Big Ten Conference           31\n 7   2014 Atlantic Coast Conference    43\n 8   2014 Big Ten Conference           38\n 9   2015 Atlantic Coast Conference    34\n10   2015 Big Ten Conference           42\n# ℹ 18 more rows\n\n\nCode\nWinsdata &lt;- data |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\")\nWinsdata\n\n\n# A tibble: 28 × 3\n# Groups:   Season [14]\n   Season Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    16\n 2   2011 Big Ten Conference            6\n 3   2012 Atlantic Coast Conference    17\n 4   2012 Big Ten Conference            3\n 5   2013 Atlantic Coast Conference    11\n 6   2013 Big Ten Conference            4\n 7   2014 Atlantic Coast Conference    12\n 8   2014 Big Ten Conference           10\n 9   2015 Atlantic Coast Conference     8\n10   2015 Big Ten Conference            6\n# ℹ 18 more rows\n\n\nWhy was this the case? There are a couple of reasons, but the biggest one is that the Big Ten didn’t see many teams score wins from Sub-100 rushing yard performances in 2011, with only 5 in 2011. In the same year, the ACC saw five teams win twice after rushing under 100 yards, and nine total teams scoring at least one win. This happens in reverse in 2021, with eight teams in the Big Ten getting at least one win from Sub-100 yard rushing performances, with Purdue and Penn State combining for 10 Wins by themselves. The ACC only had five teams that were able to get one Sub-100 Yard rushing win.\n\n\nCode\nTeamsdata &lt;- sub100W |&gt; group_by(Season,TeamFull,Conference) |&gt; filter(Conference == \"Big Ten Conference\"|Conference == \"Atlantic Coast Conference\")|&gt; summarize(Wins = n())\n\n\n`summarise()` has grouped output by 'Season', 'TeamFull'. You can override\nusing the `.groups` argument.\n\n\nCode\nTeamsdata\n\n\n# A tibble: 173 × 4\n# Groups:   Season, TeamFull [173]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Boston College Eagles         Atlantic Coast Conference     1\n 2   2011 Clemson Tigers                Atlantic Coast Conference     2\n 3   2011 Duke Blue Devils              Atlantic Coast Conference     2\n 4   2011 Florida State Seminoles       Atlantic Coast Conference     4\n 5   2011 Illinois Fighting Illini      Big Ten Conference            1\n 6   2011 Iowa Hawkeyes                 Big Ten Conference            1\n 7   2011 Miami (FL) Hurricanes         Atlantic Coast Conference     2\n 8   2011 Michigan State Spartans       Big Ten Conference            2\n 9   2011 Michigan Wolverines           Big Ten Conference            1\n10   2011 North Carolina State Wolfpack Atlantic Coast Conference     2\n# ℹ 163 more rows\n\n\nCode\nTeamsdata |&gt; filter(Season == 2011) |&gt; arrange(desc(Conference))\n\n\n# A tibble: 14 × 4\n# Groups:   Season, TeamFull [14]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Illinois Fighting Illini      Big Ten Conference            1\n 2   2011 Iowa Hawkeyes                 Big Ten Conference            1\n 3   2011 Michigan State Spartans       Big Ten Conference            2\n 4   2011 Michigan Wolverines           Big Ten Conference            1\n 5   2011 Penn State Nittany Lions      Big Ten Conference            1\n 6   2011 Boston College Eagles         Atlantic Coast Conference     1\n 7   2011 Clemson Tigers                Atlantic Coast Conference     2\n 8   2011 Duke Blue Devils              Atlantic Coast Conference     2\n 9   2011 Florida State Seminoles       Atlantic Coast Conference     4\n10   2011 Miami (FL) Hurricanes         Atlantic Coast Conference     2\n11   2011 North Carolina State Wolfpack Atlantic Coast Conference     2\n12   2011 North Carolina Tar Heels      Atlantic Coast Conference     1\n13   2011 Virginia Cavaliers            Atlantic Coast Conference     1\n14   2011 Wake Forest Demon Deacons     Atlantic Coast Conference     1\n\n\nCode\nTeamsdata|&gt; filter(Season == 2021) |&gt; arrange(desc(Conference))\n\n\n# A tibble: 13 × 4\n# Groups:   Season, TeamFull [13]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2021 Iowa Hawkeyes                 Big Ten Conference            3\n 2   2021 Maryland Terrapins            Big Ten Conference            1\n 3   2021 Michigan State Spartans       Big Ten Conference            3\n 4   2021 Minnesota Golden Gophers      Big Ten Conference            1\n 5   2021 Ohio State Buckeyes           Big Ten Conference            1\n 6   2021 Penn State Nittany Lions      Big Ten Conference            4\n 7   2021 Purdue Boilermakers           Big Ten Conference            6\n 8   2021 Rutgers Scarlet Knights       Big Ten Conference            1\n 9   2021 Miami (FL) Hurricanes         Atlantic Coast Conference     3\n10   2021 North Carolina State Wolfpack Atlantic Coast Conference     3\n11   2021 Pitt Panthers                 Atlantic Coast Conference     2\n12   2021 Virginia Cavaliers            Atlantic Coast Conference     1\n13   2021 Wake Forest Demon Deacons     Atlantic Coast Conference     1\n\n\n\n\nCode\nBigTen\n\n\n# A tibble: 14 × 3\n# Groups:   Season [14]\n   Season Conference          Wins\n    &lt;int&gt; &lt;chr&gt;              &lt;int&gt;\n 1   2011 Big Ten Conference     6\n 2   2012 Big Ten Conference     3\n 3   2013 Big Ten Conference     4\n 4   2014 Big Ten Conference    10\n 5   2015 Big Ten Conference     6\n 6   2016 Big Ten Conference     4\n 7   2017 Big Ten Conference    11\n 8   2018 Big Ten Conference     7\n 9   2019 Big Ten Conference    11\n10   2020 Big Ten Conference     5\n11   2021 Big Ten Conference    20\n12   2022 Big Ten Conference    16\n13   2023 Big Ten Conference    15\n14   2024 Big Ten Conference     9\n\n\n\n\nCode\nACC\n\n\n# A tibble: 14 × 3\n# Groups:   Season [14]\n   Season Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    16\n 2   2012 Atlantic Coast Conference    17\n 3   2013 Atlantic Coast Conference    11\n 4   2014 Atlantic Coast Conference    12\n 5   2015 Atlantic Coast Conference     8\n 6   2016 Atlantic Coast Conference    10\n 7   2017 Atlantic Coast Conference    12\n 8   2018 Atlantic Coast Conference     7\n 9   2019 Atlantic Coast Conference    10\n10   2020 Atlantic Coast Conference     6\n11   2021 Atlantic Coast Conference    10\n12   2022 Atlantic Coast Conference     8\n13   2023 Atlantic Coast Conference    13\n14   2024 Atlantic Coast Conference    10\n\n\nThe real why in this case is the drastic change in offenses in the Big Ten towards more passing in the Late 2010s. In 2011, the Big Ten had close to 15 more attempts of rushes than passes. In 2024, this difference dropped to less than four. The ACC has always valued the pass, and even has been close to even in 2024, but production from passers hasn’t been as kind to get wins from lack of rushing.\n\n\nCode\navgs &lt;- logs |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\") |&gt; group_by(Season,Conference) |&gt; summarize(AVGrushatt = mean(RushingAtt),AVGpassatt = mean(PassingAtt))\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\navgs\n\n\n# A tibble: 28 × 4\n# Groups:   Season [14]\n   Season Conference                AVGrushatt AVGpassatt\n    &lt;int&gt; &lt;chr&gt;                          &lt;dbl&gt;      &lt;dbl&gt;\n 1   2011 Atlantic Coast Conference       37.3       31.2\n 2   2011 Big Ten Conference              41.2       26.9\n 3   2012 Atlantic Coast Conference       38.1       34.3\n 4   2012 Big Ten Conference              40.2       30.4\n 5   2013 Atlantic Coast Conference       39.3       31.6\n 6   2013 Big Ten Conference              40.4       30.8\n 7   2014 Atlantic Coast Conference       40.0       30.7\n 8   2014 Big Ten Conference              40.1       30.1\n 9   2015 Atlantic Coast Conference       39.1       30.3\n10   2015 Big Ten Conference              38.7       32.3\n# ℹ 18 more rows\n\n\nCode\navgs_long &lt;- avgs |&gt; \n  pivot_longer(cols = c(AVGrushatt, AVGpassatt), \n               names_to = \"StatType\", \n               values_to = \"Attempts\")\nggplot(avgs_long, aes(x = Season, y = Attempts, color = StatType, linetype = Conference)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  labs(title = \"Average Rushing and Passing Attempts by Season\",\n       x = \"Season\",\n       y = \"Average Attempts\",\n       color = \"Attempt Type\",\n       linetype = \"Conference\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "posts/3rdand6/index.html",
    "href": "posts/3rdand6/index.html",
    "title": "Did Maryland make a crucial mistake against Illinois?",
    "section": "",
    "text": "During last year’s homecoming game, Maryland ran the ball on 3rd and 6 on the Illinois 29 yard line, losing yardage, and setting up a field goal to tie the game. Maryland would go on to lose 27-24 on a walkoff field goal. Many blamed the play call for the loss, what was this really that bad of a decision? Let’s walk through the history of rushing on third and six in the past five years. First we need to load in the libraries.\n\n\nCode\nlibrary(cfbfastR)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNext, we can load in data from the past 5 seasons (note I am also using the third and six data since CFBfastR does not work with my computer well.)\n\n\nCode\n#pbp &lt;- load_cfb_pbp(seasons = c(2019,2020,2021,2022,2023,2024))\n#pbp\nlibrary(readr)\nthird_and_six &lt;- read_csv(\"third_and_six.csv\")\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 15661 Columns: 331\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (65): pos_team, def_pos_team, play_type, play_text, penalty_detail, hom...\ndbl (229): year, week, id_play, game_id, game_play_number, half_play_number,...\nlgl  (37): penalty_1st_conv, middle_8, Goal_To_Go, Under_two, Under_three, G...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nthird_and_six\n\n\n# A tibble: 15,661 × 331\n    year  week id_play   game_id game_play_number half_play_number\n   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1  2019     1 4.01e17 401110721               16               16\n 2  2019     1 4.01e17 401110721               62               62\n 3  2019     1 4.01e17 401110721               73               73\n 4  2019     1 4.01e17 401110721               88                6\n 5  2019     1 4.01e17 401110721              136               54\n 6  2019     1 4.01e17 401110722               75               75\n 7  2019     1 4.01e17 401110723               28               28\n 8  2019     1 4.01e17 401110724               16               16\n 9  2019     1 4.01e17 401110724               63               63\n10  2019     1 4.01e17 401110725              101               20\n# ℹ 15,651 more rows\n# ℹ 325 more variables: drive_play_number &lt;dbl&gt;, pos_team &lt;chr&gt;,\n#   def_pos_team &lt;chr&gt;, pos_team_score &lt;dbl&gt;, def_pos_team_score &lt;dbl&gt;,\n#   half &lt;dbl&gt;, period &lt;dbl&gt;, clock.minutes &lt;dbl&gt;, clock.seconds &lt;dbl&gt;,\n#   play_type &lt;chr&gt;, play_text &lt;chr&gt;, down &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   yards_to_goal &lt;dbl&gt;, yards_gained &lt;dbl&gt;, EPA &lt;dbl&gt;, ep_before &lt;dbl&gt;,\n#   ep_after &lt;dbl&gt;, wpa &lt;dbl&gt;, wp_before &lt;dbl&gt;, wp_after &lt;dbl&gt;, …\n\n\nThen we create a dataframe of all plays that are on third down with six yards left to the first down marker.\n\n\nCode\n#third_and_six &lt;- pbp |&gt; filter(down == 3) |&gt; filter(distance == 6)\n\n\nSo in the past five years, what have teams done on Third and Six? To do this we can use summarize and group by each play type to see what teams call.\n\n\nCode\nthird_and_six|&gt; group_by(play_type) |&gt; summarize(Count = n()) |&gt; mutate(Percentage = (Count / sum(Count)) * 100)|&gt; arrange(desc(Count)) \n\n\n# A tibble: 22 × 3\n   play_type                  Count Percentage\n   &lt;chr&gt;                      &lt;int&gt;      &lt;dbl&gt;\n 1 Pass Reception              4676     29.9  \n 2 Pass Incompletion           3866     24.7  \n 3 Rush                        3173     20.3  \n 4 Penalty                     1068      6.82 \n 5 Timeout                      929      5.93 \n 6 Sack                         800      5.11 \n 7 Passing Touchdown            496      3.17 \n 8 Interception Return          257      1.64 \n 9 Rushing Touchdown            135      0.862\n10 Fumble Recovery (Opponent)   101      0.645\n# ℹ 12 more rows\n\n\nRush plays are around 20% according to this, but there are a couple other play types such as fumble recovery that may have been rushes before hand. Filtering by intial rush from CFBfastr’s dataset, we can find a more accurate number for rushes.\n\n\nCode\nrushes &lt;- third_and_six|&gt; filter(rush == 1)\nrushcount &lt;-  rushes|&gt; summarise(Count = n()) |&gt; pluck(1)\npasses &lt;- third_and_six|&gt; filter(pass == 1) |&gt; summarise(Count = n()) |&gt; pluck(1)\ntotal &lt;- rushcount+passes\nperct &lt;- (rushcount/total) * 100\nperct\n\n\n[1] 24.88618\n\n\nOk so only 24% of the time teams run on Third and Six, it doesn’t seem too optimal, but not super rare. How many yards on average do these teams gain when they run on third and six?\n\n\nCode\navgrush &lt;- rushes|&gt; summarize(mean(yards_gained))\navgrush\n\n\n# A tibble: 1 × 1\n  `mean(yards_gained)`\n                 &lt;dbl&gt;\n1                 6.08\n\n\nOn average, they rush for the first down, which is pretty suprising considering the spread of the play usage. From here, lets see what teams run the most on third and six, and spolier alert, it’s teams that rely on the run the most.\n\n\nCode\nteamrushes &lt;- rushes |&gt; group_by(pos_team) |&gt; summarize(Count = n(),Avg_Yards_Gained = mean(yards_gained)) |&gt; arrange(desc(Count))\nteamrushes\n\n\n# A tibble: 280 × 3\n   pos_team         Count Avg_Yards_Gained\n   &lt;chr&gt;            &lt;int&gt;            &lt;dbl&gt;\n 1 Navy                60             4.22\n 2 Army                51             4.14\n 3 Air Force           42             5.69\n 4 Georgia Southern    35             5.89\n 5 New Mexico          32             6.47\n 6 Ole Miss            31             4.77\n 7 Kent State          30             6.6 \n 8 Baylor              29             9.03\n 9 Georgia Tech        29             7.55\n10 Louisiana           29             6.45\n# ℹ 270 more rows\n\n\nThe service academies do it the most, they also rely on the run game more than most in the nation. That could explain how their averages are lower than some of the other teams on this list. How does Maryland compare?\n\n\nCode\nteamrushes |&gt; filter(pos_team == \"Maryland\")\n\n\n# A tibble: 1 × 3\n  pos_team Count Avg_Yards_Gained\n  &lt;chr&gt;    &lt;int&gt;            &lt;dbl&gt;\n1 Maryland    17             6.41\n\n\nSo on average, Maryland gets the first down on Third and Six when they run the ball. They also don’t run it too often. How does this look visually when comparing all schools?\n\n\nCode\numd &lt;- teamrushes|&gt; filter(pos_team == \"Maryland\")\n\n\n\n\nCode\nggplot() +\ngeom_point(data = teamrushes, aes(x=Count, y=Avg_Yards_Gained), color = \"gray\", size = 1)+ \ngeom_point(data = umd, aes(x=Count, y=Avg_Yards_Gained), color = \"red\", size = 2)+\ngeom_hline(yintercept = 6, linetype = \"dashed\", color = \"blue\")+\n  labs(title = \"Maryland on average gets the first down with rushes on third and six \", x = \"Count\", y = \"Avg Yards Gained\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWith this, it’s easy to draw the conclusion that this was the right decison. Maryland has had a good amount of success running it on third and six, and this was an educated decison. Well lets look at the history of Maryland running it on Third and Six. How many were successful?\n\n\nCode\nfirstdown &lt;- rushes |&gt; filter(pos_team == \"Maryland\") |&gt; select(season,pos_team,yards_gained,wpa)|&gt;  mutate(First_Down = ifelse(yards_gained &gt;= 6, TRUE, FALSE))|&gt; arrange((wpa))\nfirstdown\n\n\n# A tibble: 17 × 5\n   season pos_team yards_gained        wpa First_Down\n    &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt; &lt;lgl&gt;     \n 1   2023 Maryland           -1 -0.099     FALSE     \n 2   2022 Maryland           -2 -0.0701    FALSE     \n 3   2022 Maryland            1 -0.0649    FALSE     \n 4   2021 Maryland            5 -0.0143    FALSE     \n 5   2023 Maryland            5 -0.0140    FALSE     \n 6   2022 Maryland            3 -0.00593   FALSE     \n 7   2024 Maryland            5 -0.00304   FALSE     \n 8   2022 Maryland            6 -0.000840  TRUE      \n 9   2019 Maryland            3 -0.0000001 FALSE     \n10   2021 Maryland            8  0.0000127 TRUE      \n11   2021 Maryland            8  0.0000732 TRUE      \n12   2021 Maryland            5  0.00107   FALSE     \n13   2022 Maryland           21  0.00163   TRUE      \n14   2023 Maryland           15  0.00239   TRUE      \n15   2023 Maryland           12  0.0645    TRUE      \n16   2022 Maryland            7  0.0648    TRUE      \n17   2023 Maryland            8  0.0699    TRUE      \n\n\nOf those 17 times, 8 of them reached first down, and three were over 12 yards. On the other hand, of every time Maryland ran on Third and Six, their 1 yard loss was the most consquential of any of the plays listed about according to WPA.\nSo what’s the answer? The answer is it’s not as simple as what the normal fan would call a bad call. Running it on third and six seems like giving up, but in reality Maryland has found some success in the past and don’t do it as much. That being said, the success of this play historically is close to a coin flip and really depends on the team they play."
  },
  {
    "objectID": "docs/posts/volleyaces/index.html",
    "href": "docs/posts/volleyaces/index.html",
    "title": "Maryland Volleyball’s uncharacteristic ways of scoring aces",
    "section": "",
    "text": "In the realm of College Volleyball, outside hitters see the most success in scoring service aces when averaged out per match. But Maryland Volleyball operates outside of this norm, with their leading Ace scorer as a defensive specialist.\nIn this 2023 sample of players in the top 25% in the nation in Aces Per Match, Outside Hitters make up the most of any position by a good amount.\n\n\nCode\nlibrary(ggbeeswarm)\n\n\nLoading required package: ggplot2\n\n\nCode\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\nplogs &lt;- read.csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\nplayers &lt;- plogs|&gt; filter(gp &gt;= 20,!is.na(aces),!is.na(pos)) |&gt; mutate(AcesPerMatch = aces/mp)\nTQ &lt;- players |&gt; filter(AcesPerMatch &gt; 0.8529)\numd &lt;- players |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; filter(AcesPerMatch &gt; 0.8529) \n\n\nggplot() + geom_beeswarm(data=TQ, aes(x=pos, y=AcesPerMatch), color=\"grey\")+\n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=AcesPerMatch), color=\"red\") +   geom_text_repel(\n    data=umd, \n    aes(x=pos, y=AcesPerMatch, label=full_name))+\n  labs(title = \"Outside hitters see the most amount of service aces per match\", subtitle = \"Three Terps are in the top 25% of the nation in Aces Per Match\", x = \"Position\", y=\"Aces Per Match\")\n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\n\n\n\n\nTo get the Top 25% in the nation, the summary function seperates the data from the game logs into quartiles. When you take the third quartile, the top 25% of the nation gets around 0.85 aces per match, or for every ten matches they are expected to get at least eight aces.\n\n\nCode\nsummary(players$AcesPerMatch)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1200  0.5172  0.5460  0.8529  2.3448 \n\n\nNot only are Outside Hitters the most common players in the Top 25%, but they also produce more than an ace every match on, and are third most in average aces in this sample. Keep in mind, the Opposite Hitters and Rightside Hitters do not have many players in this sample, which inflates the total of their averages. When we take that into account, the 326 players in the sample averaging nearly 1.2 Aces per set makes the Outside Hitter the most prolific position in scoring aces.\n\n\nCode\nTQ |&gt; group_by(pos) |&gt; summarize(AverageAces = mean(AcesPerMatch), Count = n()) |&gt; arrange(desc(AverageAces)) |&gt; arrange(desc(AverageAces))\n\n\n# A tibble: 9 × 3\n  pos   AverageAces Count\n  &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n1 OPP         1.30     15\n2 RS          1.24      9\n3 OH          1.18    326\n4 S           1.14    214\n5 L           1.13     54\n6 DS          1.10     55\n7 L/DS        1.09    108\n8 MB          1.08     53\n9 MH          0.931     2\n\n\nBut Maryland scores aces in a different way. Maryland’s outside hitter’s Sam Csire ranks third on her team in Aces Per Match, lagging behind a defensive specialist and a setter.Looking at the total leaderboard, they really only have three players that are good at scoring aces at a consistant rate. Keep note that current national leader in Aces Samantha Schnitta did not have the same success last year.\n\n\nCode\numdtotal &lt;- players |&gt; filter(team == \"Maryland Terrapins, Terps\") |&gt;  select(team,full_name,pos,AcesPerMatch) |&gt; arrange(desc(AcesPerMatch))\numdtotal\n\n\n                        team          full_name pos AcesPerMatch\n1  Maryland Terrapins, Terps       Lilly Gunter  DS    1.0312500\n2  Maryland Terrapins, Terps         Erin Engel   S    0.9687500\n3  Maryland Terrapins, Terps          Sam Csire  OH    0.9354839\n4  Maryland Terrapins, Terps      Sydney Dowler   S    0.6129032\n5  Maryland Terrapins, Terps        Jonna Spohn   L    0.5806452\n6  Maryland Terrapins, Terps  Samantha Schnitta  RS    0.4814815\n7  Maryland Terrapins, Terps   Alex McGillivray   L    0.1250000\n8  Maryland Terrapins, Terps       Eva Rohrbach  MB    0.0625000\n9  Maryland Terrapins, Terps     Anastasia Russ  MB    0.0000000\n10 Maryland Terrapins, Terps         Laila Ivey  OH    0.0000000\n\n\nIntresting enough Maryland’s top player was defensive specialist Lilly Gunter. In fact, out of all defensive specialists or hybrids in the Big Ten, Gunter was the only one to average over an ace a match.\n\n\nCode\nbig_ten_teams &lt;- c(\"Maryland Terrapins, Terps\", \"Penn St. Nittany Lions\", \"Michigan Wolverines\",\n                   \"Ohio St. Buckeyes\", \"Wisconsin Badgers\", \"Iowa Hawkeyes\",\n                   \"Purdue Boilermakers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\",\n                   \"Nebraska Cornhuskers\", \"Minnesota Golden Gophers\", \"Michigan St. Spartans\")\nBigTen &lt;- players |&gt; filter(team %in% big_ten_teams) |&gt; filter(pos == \"DS\" | pos == \"L/DS\") |&gt; select(team,full_name,pos,AcesPerMatch) |&gt; arrange (desc(AcesPerMatch))\nBigTen\n\n\n                        team            full_name  pos AcesPerMatch\n1  Maryland Terrapins, Terps         Lilly Gunter   DS   1.03125000\n2          Wisconsin Badgers       Gulce Guctekin L/DS   0.96969697\n3      Northwestern Wildcats        Ellee Stinson L/DS   0.93333333\n4     Penn St. Nittany Lions       Gillian Grimes L/DS   0.87500000\n5      Michigan St. Spartans         Nalani Iosia L/DS   0.80645161\n6   Illinois Fighting Illini          Vanessa Pan L/DS   0.76666667\n7   Minnesota Golden Gophers           Kylie Murr L/DS   0.73333333\n8     Penn St. Nittany Lions      Maddy Bilinovic   DS   0.73076923\n9          Ohio St. Buckeyes  Sarah Sue Morbitzer   DS   0.68965517\n10  Illinois Fighting Illini      Caroline Barnes L/DS   0.65384615\n11       Michigan Wolverines      Brooke Humphrey L/DS   0.51724138\n12  Illinois Fighting Illini           Lily Barry L/DS   0.50000000\n13       Purdue Boilermakers  Maddie Schermerhorn   DS   0.50000000\n14       Purdue Boilermakers          Ali Hornung   DS   0.48387097\n15  Minnesota Golden Gophers     Zeynep Palabiyik L/DS   0.45000000\n16         Ohio St. Buckeyes        Sydney Taylor   DS   0.41379310\n17       Michigan Wolverines        Maddi Cuchran   DS   0.34482759\n18     Northwestern Wildcats      Gigi Navarrete  L/DS   0.23333333\n19       Purdue Boilermakers          Emily Brown   DS   0.06666667"
  },
  {
    "objectID": "docs/posts/RunEmpty/index.html",
    "href": "docs/posts/RunEmpty/index.html",
    "title": "Maryland Football has struggled to produce on the ground this year",
    "section": "",
    "text": "Maryland’s rushing production has seen a dive in production this year, only producing above the Big Ten average twice in eight games.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate)\nfoot &lt;- read.csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\nbig &lt;- foot |&gt; filter(Conference == \"Big Ten Conference\") |&gt; mutate(GameTick = as.character(Game)) |&gt; select(Team,GameTick,RushingAvg)\nggplot() + \n  geom_line(data=big, aes(x=GameTick, y=RushingAvg, group=Team)) + \n  scale_y_continuous(limits = c(-1, 9))  +\n    geom_hline(yintercept= 4.362821, color=\"blue\") + labs(title = \"Maryland's rushing yards average struggles to tread water\", subtitle = \"The Terps only were above the Big Ten Average in rushing yards average twice\") + \n  facet_wrap(~Team)\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThis comes after the transfer of Antwain Littleton, and the injury to Colby McDonald in mid-october. Even with these factors, the Terps have performed below expetations, with Roman Hemby and Nolan Ray unable to outperform the Big Ten average.\nNotable under performers in this dataset are current Big Ten bottom dwellers in UCLA and Nortwestern, teams that have had a hard time performing in any aspect. Suprising on this list is No. 2 ranked Ohio State, who has seen a dive in production despite a key transfer addition in Quinshon Judkins.\nSometimes, this can be explained by passing production outperforming the rushing production. A team doesn’t need to pass the ball if their quarterback is lack luster.\nLook at a team like Iowa, who has been above our at the Big Ten average in rushing yards this year. A good explainers for this could be the fact that they are one of the few teams that has had their rushing attack out produce their passing attack.\n\n\nCode\nIowa &lt;- foot |&gt; filter(TeamFull == \"Iowa Hawkeyes\") |&gt; mutate(RushVsPass = RushingYds/PassingYds) |&gt;  select(Team,RushingYds,PassingYds,RushVsPass)\nIowa\n\n\n  Team RushingYds PassingYds RushVsPass\n1 Iowa        241        251  0.9601594\n2 Iowa        204         99  2.0606061\n3 Iowa        284        178  1.5955056\n4 Iowa        272         62  4.3870968\n5 Iowa        116        110  1.0545455\n6 Iowa        220        108  2.0370370\n7 Iowa        133        150  0.8866667\n8 Iowa        202        153  1.3202614\n9 Iowa        329         93  3.5376344\n\n\nThis is an outlier compared to the rest of the Big Ten, who usually have a passing average above their rushing average. Only a small amount of games in the Big Ten has seen their rushing attack outperform the passing attack on a Yards per Attempt basis.\n\n\nCode\nbigcomp &lt;- foot |&gt;\n  filter(Conference == \"Big Ten Conference\") |&gt;\n  mutate( GameTick = as.character(Game),PassingAvg = PassingYds/PassingAtt)\nmean(bigcomp$PassingAvg)\n\n\n[1] 7.634705\n\n\nCode\nggplot(bigcomp) + \n  geom_line(aes(x = GameTick, y = RushingAvg, group = Team, color = \"Rushing Average\")) + \n  geom_line(aes(x = GameTick, y = PassingAvg, group = Team, color = \"Passing Average\")) + \n  geom_hline(aes(yintercept = 7.634, color = \"Big Ten Passing Average\")) +\n  scale_y_continuous(limits = c(0, 20)) +\n  scale_color_manual(\n    values = c(\"Rushing Average\" = \"red\", \"Passing Average\" = \"green\", \"Big Ten Passing Average\" = \"blue\")\n  ) +\n  labs(\n    title = \"The Big Ten Outliers in Passing and Rushing Production\",\n    subtitle = \"Iowa and Michigan have needed to lean on their rushing attack at times to get through games\",\n    x = \"Games Played\", y = \"Average Yards Per Attempt\",\n    color = \"Metric\"\n  ) + \n  facet_wrap(~Team)\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nLook at Maryland, who has had below average passing production, but still out performs their rushing production by a good amount. This can really only be explained by a subpar rushing attack that has been impacted by departures and injury. While there could be other metrics explaining this such as the defenses they play, the Terps"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "docs/posts/CloseRush/index.html",
    "href": "docs/posts/CloseRush/index.html",
    "title": "The ACC and Big Ten’s wins with less than 100 Yards Rushing",
    "section": "",
    "text": "The philosophy that you need to run the ball to win is one that is hotly debated in Sports Circles. But teams in the Big Ten and ACC conference have gotten away with winning games despite not rushing for 100 Yards. The difference between the two is that they’ve flipflopped positions in the past two years.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlogs &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\nsub100 &lt;- logs|&gt; filter(RushingYds &lt;= 100)\nsub100W &lt;- sub100 |&gt; filter(Outcome == \"W\")\ndata &lt;- sub100W |&gt; group_by(Season,Conference) |&gt; summarize(Wins = n())\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\nBigTen &lt;- data |&gt; filter(Conference == \"Big Ten Conference\")\nSEC &lt;- data |&gt; filter(Conference ==\"Southeastern Conference\")\nCUSA &lt;- data |&gt; filter(Conference ==\"Conference USA\")\nBig12 &lt;- data |&gt; filter(Conference ==\"Big 12 Conference\")\nInd &lt;- data |&gt; filter(Conference ==\"Independent\")\nMAC &lt;- data |&gt; filter(Conference ==\"Mid-American Conference\")\nPAC12 &lt;- data |&gt; filter(Conference ==\"Pac-12 Conference\", Conference == \"Pacific-12 Conference\")\nBigEast &lt;- data |&gt; filter(Conference ==\"Big East Conference\")\nSunBelt &lt;- data |&gt; filter(Conference ==\"Sun Belt Conference\")\nMWC &lt;- data |&gt; filter(Conference ==\"Mountain West Conference\")\nWAC &lt;- data |&gt; filter(Conference ==\"Western Athletic Conference\")\nACC &lt;- data |&gt; filter(Conference == \"Atlantic Coast Conference\")\nggplot(data) +\n  geom_line(data = SEC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = CUSA, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = Big12, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = Ind, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = MAC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = PAC12, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = BigEast, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = SunBelt, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = MWC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_line(data = WAC, aes(x = Season, y = Wins), color = \"gray\") +\n  geom_point(data = BigTen, aes(x = Season, y = Wins, color = \"Big Ten\")) +\n  geom_line(data = BigTen, aes(x = Season, y = Wins, color = \"Big Ten\")) +\n  geom_point(data = ACC, aes(x = Season, y = Wins, color = \"ACC\")) +\n  geom_line(data = ACC, aes(x = Season, y = Wins, color = \"ACC\")) +\n  \n  labs(title = \"The ACC and Big Ten have Flip-Flopped Winning Sub-100 Yard Rushing Wins\", \n       x = \"Season\", \n       y = \"Sub-100 Yard Rushing Wins\",\n       color = \"Conference\") +  # Label for the legend\n  scale_color_manual(values = c(\"Big Ten\" = \"blue\", \"ACC\" = \"red\")) +  # Custom colors for Big Ten and ACC\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWinning when rushing for less than 100 yards isn’t common. When we load in the data of Sub 100 Yard Rushing games, it’s not pretty, as expected, there were 5122 Sub-100 Yard rushing games since 2011. Only 1096 of them were wins. This comes out to a 21% win percentage, which is not very good.\n\n\nCode\nWins &lt;- sub100W |&gt; summarise(Count = n()) |&gt; pluck(1)\nTotal &lt;- sub100  |&gt; summarise(Count = n()) |&gt; pluck(1)\nWinpct &lt;- (Wins/Total)\nWinpct\n\n\n[1] 0.2139789\n\n\nIn the Big Ten, this is no exception, with a slightly better win percentage than the national average, the Big Ten had a little more than a half of a percentage point better when it came to Sub-100 Yard rushing wins.\n\n\nCode\nbigtensub &lt;- sub100 |&gt; filter(Conference == \"Big Ten Conference\")\nbigtenw &lt;- bigtensub |&gt; filter(Outcome == \"W\")\nBigWins &lt;- bigtenw |&gt; summarise(Count = n()) |&gt; pluck(1)\nBigTotal &lt;- bigtensub |&gt; summarise(Count = n()) |&gt; pluck(1)\nBigWinPct &lt;- BigWins/BigTotal\nBigWinPct\n\n\n[1] 0.2197232\n\n\nWell what teams get away with these performances? Surprisingly, the conference that has had the most amount of games with Sub-100 Yard Rushing is the Big Ten, the rough and tough conference that loves to run the ball according to fans. But when you look at wins after these performances, the ACC reigns supreme.\n\n\nCode\ntotalseasondata &lt;- sub100 |&gt; group_by(Conference)|&gt; summarize(Games = n())\ntotalseasondata |&gt; arrange(desc(Wins))\n\n\n# A tibble: 14 × 2\n   Conference                   Games\n   &lt;chr&gt;                        &lt;int&gt;\n 1 American Athletic Conference   395\n 2 Atlantic Coast Conference      559\n 3 Big 12 Conference              344\n 4 Big East Conference             60\n 5 Big Ten Conference             578\n 6 Conference USA                 576\n 7 Independent                    145\n 8 Mid-American Conference        515\n 9 Mountain West Conference       424\n10 Pac-12 Conference              457\n11 Pacific-12 Conference           45\n12 Southeastern Conference        509\n13 Sun Belt Conference            455\n14 Western Athletic Conference     60\n\n\nCode\nseasondata &lt;- sub100W |&gt; group_by(Conference)|&gt; summarize(Wins = n())\nseasondata |&gt; arrange(desc(Wins))\n\n\n# A tibble: 14 × 2\n   Conference                    Wins\n   &lt;chr&gt;                        &lt;int&gt;\n 1 Atlantic Coast Conference      150\n 2 Big Ten Conference             127\n 3 Pac-12 Conference              127\n 4 Southeastern Conference        121\n 5 Conference USA                  99\n 6 Mountain West Conference        96\n 7 American Athletic Conference    78\n 8 Big 12 Conference               78\n 9 Sun Belt Conference             75\n10 Mid-American Conference         73\n11 Independent                     26\n12 Big East Conference             17\n13 Pacific-12 Conference           16\n14 Western Athletic Conference     13\n\n\nBut when you look season by season, you can see a trend between the Big Ten and ACC Conference moving in different directions. The Big Ten was one of the worst teams in the country in getting wins from Sub-100 Rushing Yard games, with more games in 2011 than the ACC, yet only six wins. In that same year, the ACC had 16 wins, more than double that of the Big Ten. But over time, these conferences almost swapped places, with 2021 the most glaring change, as the Big Ten had 20 wins compared to the ACC’s 10.\n\n\nCode\ntotaldata &lt;- sub100 |&gt; group_by(Season,Conference) |&gt; summarize(Games = n()) |&gt; arrange((Season))\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\ndata &lt;- sub100W |&gt; group_by(Season,Conference) |&gt; summarize(Wins = n()) |&gt; arrange(Season)\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\n# Correct filtering for multiple conferences\ntotaldata |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\")\n\n\n# A tibble: 28 × 3\n# Groups:   Season [14]\n   Season Conference                Games\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    45\n 2   2011 Big Ten Conference           26\n 3   2012 Atlantic Coast Conference    50\n 4   2012 Big Ten Conference           27\n 5   2013 Atlantic Coast Conference    41\n 6   2013 Big Ten Conference           31\n 7   2014 Atlantic Coast Conference    43\n 8   2014 Big Ten Conference           38\n 9   2015 Atlantic Coast Conference    34\n10   2015 Big Ten Conference           42\n# ℹ 18 more rows\n\n\nCode\nWinsdata &lt;- data |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\")\nWinsdata\n\n\n# A tibble: 28 × 3\n# Groups:   Season [14]\n   Season Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    16\n 2   2011 Big Ten Conference            6\n 3   2012 Atlantic Coast Conference    17\n 4   2012 Big Ten Conference            3\n 5   2013 Atlantic Coast Conference    11\n 6   2013 Big Ten Conference            4\n 7   2014 Atlantic Coast Conference    12\n 8   2014 Big Ten Conference           10\n 9   2015 Atlantic Coast Conference     8\n10   2015 Big Ten Conference            6\n# ℹ 18 more rows\n\n\nWhy was this the case? There are a couple of reasons, but the biggest one is that the Big Ten didn’t see many teams score wins from Sub-100 rushing yard performances in 2011, with only 5 in 2011. In the same year, the ACC saw five teams win twice after rushing under 100 yards, and nine total teams scoring at least one win. This happens in reverse in 2021, with eight teams in the Big Ten getting at least one win from Sub-100 yard rushing performances, with Purdue and Penn State combining for 10 Wins by themselves. The ACC only had five teams that were able to get one Sub-100 Yard rushing win.\n\n\nCode\nTeamsdata &lt;- sub100W |&gt; group_by(Season,TeamFull,Conference) |&gt; filter(Conference == \"Big Ten Conference\"|Conference == \"Atlantic Coast Conference\")|&gt; summarize(Wins = n())\n\n\n`summarise()` has grouped output by 'Season', 'TeamFull'. You can override\nusing the `.groups` argument.\n\n\nCode\nTeamsdata\n\n\n# A tibble: 173 × 4\n# Groups:   Season, TeamFull [173]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Boston College Eagles         Atlantic Coast Conference     1\n 2   2011 Clemson Tigers                Atlantic Coast Conference     2\n 3   2011 Duke Blue Devils              Atlantic Coast Conference     2\n 4   2011 Florida State Seminoles       Atlantic Coast Conference     4\n 5   2011 Illinois Fighting Illini      Big Ten Conference            1\n 6   2011 Iowa Hawkeyes                 Big Ten Conference            1\n 7   2011 Miami (FL) Hurricanes         Atlantic Coast Conference     2\n 8   2011 Michigan State Spartans       Big Ten Conference            2\n 9   2011 Michigan Wolverines           Big Ten Conference            1\n10   2011 North Carolina State Wolfpack Atlantic Coast Conference     2\n# ℹ 163 more rows\n\n\nCode\nTeamsdata |&gt; filter(Season == 2011) |&gt; arrange(desc(Conference))\n\n\n# A tibble: 14 × 4\n# Groups:   Season, TeamFull [14]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Illinois Fighting Illini      Big Ten Conference            1\n 2   2011 Iowa Hawkeyes                 Big Ten Conference            1\n 3   2011 Michigan State Spartans       Big Ten Conference            2\n 4   2011 Michigan Wolverines           Big Ten Conference            1\n 5   2011 Penn State Nittany Lions      Big Ten Conference            1\n 6   2011 Boston College Eagles         Atlantic Coast Conference     1\n 7   2011 Clemson Tigers                Atlantic Coast Conference     2\n 8   2011 Duke Blue Devils              Atlantic Coast Conference     2\n 9   2011 Florida State Seminoles       Atlantic Coast Conference     4\n10   2011 Miami (FL) Hurricanes         Atlantic Coast Conference     2\n11   2011 North Carolina State Wolfpack Atlantic Coast Conference     2\n12   2011 North Carolina Tar Heels      Atlantic Coast Conference     1\n13   2011 Virginia Cavaliers            Atlantic Coast Conference     1\n14   2011 Wake Forest Demon Deacons     Atlantic Coast Conference     1\n\n\nCode\nTeamsdata|&gt; filter(Season == 2021) |&gt; arrange(desc(Conference))\n\n\n# A tibble: 13 × 4\n# Groups:   Season, TeamFull [13]\n   Season TeamFull                      Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                         &lt;chr&gt;                     &lt;int&gt;\n 1   2021 Iowa Hawkeyes                 Big Ten Conference            3\n 2   2021 Maryland Terrapins            Big Ten Conference            1\n 3   2021 Michigan State Spartans       Big Ten Conference            3\n 4   2021 Minnesota Golden Gophers      Big Ten Conference            1\n 5   2021 Ohio State Buckeyes           Big Ten Conference            1\n 6   2021 Penn State Nittany Lions      Big Ten Conference            4\n 7   2021 Purdue Boilermakers           Big Ten Conference            6\n 8   2021 Rutgers Scarlet Knights       Big Ten Conference            1\n 9   2021 Miami (FL) Hurricanes         Atlantic Coast Conference     3\n10   2021 North Carolina State Wolfpack Atlantic Coast Conference     3\n11   2021 Pitt Panthers                 Atlantic Coast Conference     2\n12   2021 Virginia Cavaliers            Atlantic Coast Conference     1\n13   2021 Wake Forest Demon Deacons     Atlantic Coast Conference     1\n\n\n\n\nCode\nBigTen\n\n\n# A tibble: 14 × 3\n# Groups:   Season [14]\n   Season Conference          Wins\n    &lt;int&gt; &lt;chr&gt;              &lt;int&gt;\n 1   2011 Big Ten Conference     6\n 2   2012 Big Ten Conference     3\n 3   2013 Big Ten Conference     4\n 4   2014 Big Ten Conference    10\n 5   2015 Big Ten Conference     6\n 6   2016 Big Ten Conference     4\n 7   2017 Big Ten Conference    11\n 8   2018 Big Ten Conference     7\n 9   2019 Big Ten Conference    11\n10   2020 Big Ten Conference     5\n11   2021 Big Ten Conference    20\n12   2022 Big Ten Conference    16\n13   2023 Big Ten Conference    15\n14   2024 Big Ten Conference     9\n\n\n\n\nCode\nACC\n\n\n# A tibble: 14 × 3\n# Groups:   Season [14]\n   Season Conference                 Wins\n    &lt;int&gt; &lt;chr&gt;                     &lt;int&gt;\n 1   2011 Atlantic Coast Conference    16\n 2   2012 Atlantic Coast Conference    17\n 3   2013 Atlantic Coast Conference    11\n 4   2014 Atlantic Coast Conference    12\n 5   2015 Atlantic Coast Conference     8\n 6   2016 Atlantic Coast Conference    10\n 7   2017 Atlantic Coast Conference    12\n 8   2018 Atlantic Coast Conference     7\n 9   2019 Atlantic Coast Conference    10\n10   2020 Atlantic Coast Conference     6\n11   2021 Atlantic Coast Conference    10\n12   2022 Atlantic Coast Conference     8\n13   2023 Atlantic Coast Conference    13\n14   2024 Atlantic Coast Conference    10\n\n\nThe real why in this case is the drastic change in offenses in the Big Ten towards more passing in the Late 2010s. In 2011, the Big Ten had close to 15 more attempts of rushes than passes. In 2024, this difference dropped to less than four. The ACC has always valued the pass, and even has been close to even in 2024, but production from passers hasn’t been as kind to get wins from lack of rushing.\n\n\nCode\navgs &lt;- logs |&gt; filter(Conference == \"Big Ten Conference\" | Conference == \"Atlantic Coast Conference\") |&gt; group_by(Season,Conference) |&gt; summarize(AVGrushatt = mean(RushingAtt),AVGpassatt = mean(PassingAtt))\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\navgs\n\n\n# A tibble: 28 × 4\n# Groups:   Season [14]\n   Season Conference                AVGrushatt AVGpassatt\n    &lt;int&gt; &lt;chr&gt;                          &lt;dbl&gt;      &lt;dbl&gt;\n 1   2011 Atlantic Coast Conference       37.3       31.2\n 2   2011 Big Ten Conference              41.2       26.9\n 3   2012 Atlantic Coast Conference       38.1       34.3\n 4   2012 Big Ten Conference              40.2       30.4\n 5   2013 Atlantic Coast Conference       39.3       31.6\n 6   2013 Big Ten Conference              40.4       30.8\n 7   2014 Atlantic Coast Conference       40.0       30.7\n 8   2014 Big Ten Conference              40.1       30.1\n 9   2015 Atlantic Coast Conference       39.1       30.3\n10   2015 Big Ten Conference              38.7       32.3\n# ℹ 18 more rows\n\n\nCode\navgs_long &lt;- avgs |&gt; \n  pivot_longer(cols = c(AVGrushatt, AVGpassatt), \n               names_to = \"StatType\", \n               values_to = \"Attempts\")\nggplot(avgs_long, aes(x = Season, y = Attempts, color = StatType, linetype = Conference)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  labs(title = \"Average Rushing and Passing Attempts by Season\",\n       x = \"Season\",\n       y = \"Average Attempts\",\n       color = \"Attempt Type\",\n       linetype = \"Conference\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "docs/posts/UMD-YPP/index.html",
    "href": "docs/posts/UMD-YPP/index.html",
    "title": "Maryland’s Offense is generating more Yards Per Play under Mike Locksley",
    "section": "",
    "text": "Mike Locksley’s Era of Maryland football has been scrutinzed for several reasons, the biggest being not living up to fans expectations. But when comparing the past 13 years of football, the past six have been much more productive in the offensive department.\nTo measure offense, a good metric to look at is Yards Per Play, which is exactly how it sounds. There is a discrepancy between the amount of plays in each year, but the number for Offensive and Defensive Yards Per Play can be used for several years regardless of the amount of plays in a given season. This is important because the Big Ten only saw 6 games in 2020 and 2024 is not finished. That being said, it is important to recongize that those two years are inflated due to a smaller sample size.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\ngamelogs &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\nwinlosslogs &lt;- gamelogs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\ndata &lt;- winlosslogs |&gt;\n  group_by(Season,Team,Conference) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards),\n    TotalWins = sum(wins))|&gt;\n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\n`summarise()` has grouped output by 'Season', 'Team'. You can override using\nthe `.groups` argument.\n\n\nCode\numd &lt;- data |&gt; filter(Team == \"Maryland\")\n\n\nLocksley took over the Terps after 2018, trying to break a bad streak of coaches since the firing of Ralph Friedgen in 2010. In that time period from 2011-2018 the Terps had a rough seven year stretch. Even with a rough year in his debut in 2019, Locks had been able to bring the offense’s production up a notch.\n\n\nCode\nlocks &lt;- umd |&gt; \n  filter(Season &gt; 2018) |&gt; group_by(Team) |&gt;\n  summarise(\n    AvgOffensiveYPP = mean(OffensiveYPP, na.rm = TRUE),\n    AvgDefensiveYPP = mean(DefensiveYPP, na.rm = TRUE),\n    AvgWins = mean(TotalWins, na.rm = TRUE)\n  ) |&gt; mutate(Seasons = \"2019-2024\")\nprelocks &lt;- umd |&gt; \n  filter(Season &lt;= 2018) |&gt; group_by(Team) |&gt;\n  summarise(\n    AvgOffensiveYPP = mean(OffensiveYPP, na.rm = TRUE),\n    AvgDefensiveYPP = mean(DefensiveYPP, na.rm = TRUE),\n    AvgWins = mean(TotalWins, na.rm = TRUE)\n  ) |&gt; mutate(Seasons = \"2011-2018\")\ncombined_data &lt;- bind_rows(prelocks,locks)\ncombined_data\n\n\n# A tibble: 2 × 5\n  Team     AvgOffensiveYPP AvgDefensiveYPP AvgWins Seasons  \n  &lt;chr&gt;              &lt;dbl&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n1 Maryland            5.39            5.47    4.75 2011-2018\n2 Maryland            5.92            5.42    5.33 2019-2024\n\n\nThe Terps offense averaged more than half a yard per play under Locks than coaches from 2011-2018, and only a tick less in defensive yards per game. Even with the COVID shortened 2020 season, an incomplete 2024 season and a bad 2019 season, Locks STILL has the edge on average wins, showing how poor the Maryland era was post Fridge.\nBut the offensive side of the ball is the most apparent difference. Here you can see the trajectory of Maryland’s offense. While there were years in 2013 and 2018 that had fireworks, there was not consistant success. After 2019, Locksley has seen consistant offense production in respect to Yards Per Play.\n\n\nCode\nggplot() + geom_line(data = umd, \n    aes(x = Season, y = OffensiveYPP)) +\n  geom_point(\n    data = umd, \n    aes(x = Season, y = OffensiveYPP, size = TotalPlays)\n  ) + \n    geom_vline(\n    xintercept = 2019, \n    linetype = \"dashed\", \n    color = \"red\", \n    size = 1\n  ) + annotate(\n    \"text\",  \n    label = \"Mike Locksley takes over\",  \n    x = 2019,  \n    y = min(umd$OffensiveYPP) + (max(umd$OffensiveYPP) - min(umd$OffensiveYPP)) * 0.1, \n    color = \"red\", \n    angle = 0, \n    vjust = 0  \n  ) +\n  \n  labs(\n    title = \"Maryland's upward trajectory for Offensive Production\", \n    subtitle = \"2020 and 2024 have limited data due to not enough games played\",\n    x = \"Season\", \n    y = \"Offensive Yards Per Play\",\n    size = \"Total Plays\"\n  ) \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nLocksley’s best season does seem inflated due to 2020’s shortened season, but he consitantly did better than the years before his second season. From 2011-2018, Maryland was only able to pass 5.7 yards per play twice. In the past five years, Maryland has passed that threshold every time.\nMaryland wasn’t only good to Maryland’s old standards, they were also above the national average in this time period.\n\n\nCode\nnationalavg &lt;- data |&gt;\n  group_by(Season) |&gt; \n  summarise(\n    AvgOffensiveYPP = mean(OffensiveYPP, na.rm = TRUE),\n    AvgDefensiveYPP = mean(DefensiveYPP, na.rm = TRUE),\n    AvgWins = mean(TotalWins, na.rm = TRUE),\n    .groups = 'drop'  # Optional: ungroup after summarizing\n  )\nnatera1 &lt;- nationalavg |&gt; filter(Season &lt; 2019) |&gt; mutate(Seasons = \"2011-2018\") |&gt;  summarise(\n    AvgOffensiveYPP = mean(AvgOffensiveYPP, na.rm = TRUE),\n    AvgDefensiveYPP = mean(AvgDefensiveYPP, na.rm = TRUE),\n    AvgWins = mean(AvgWins, na.rm = TRUE),\n    .groups = 'drop'  \n  ) |&gt; mutate(Team = \"National Average\",Seasons = \"2011-2018\")\nnatera2 &lt;- nationalavg |&gt; filter(Season &gt; 2018) |&gt; mutate(Seasons = \"2019-2024\") |&gt;  summarise(\n    AvgOffensiveYPP = mean(AvgOffensiveYPP, na.rm = TRUE),\n    AvgDefensiveYPP = mean(AvgDefensiveYPP, na.rm = TRUE),\n    AvgWins = mean(AvgWins, na.rm = TRUE),\n    .groups = 'drop' \n  ) |&gt; mutate(Team = \"National Average\",Seasons = \"2019-2024\")\nbind_rows(prelocks,natera1,locks,natera2)\n\n\n# A tibble: 4 × 5\n  Team             AvgOffensiveYPP AvgDefensiveYPP AvgWins Seasons  \n  &lt;chr&gt;                      &lt;dbl&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n1 Maryland                    5.39            5.47    4.75 2011-2018\n2 National Average            5.71            5.60    6.70 2011-2018\n3 Maryland                    5.92            5.42    5.33 2019-2024\n4 National Average            5.78            5.63    5.90 2019-2024\n\n\nThe Terps were a better than average defense in the Pre-Locksley Era, but they only suprassed the national average twice. While offense universally went up across the nation, the Terps’ offense jumped much higher than the nation did.\nThis resulted in a jump in wins, which brought them closer to the national average in Wins. Keep in mind, Maryland’s win total is weighed down by COVID, 2024, as well as a poor 2019 season. But they’ve still come a long way.\n\n\nCode\nstr(umd)\n\n\ngropd_df [14 × 10] (S3: grouped_df/tbl_df/tbl/data.frame)\n $ Season        : int [1:14] 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 ...\n $ Team          : chr [1:14] \"Maryland\" \"Maryland\" \"Maryland\" \"Maryland\" ...\n $ Conference    : chr [1:14] \"Atlantic Coast Conference\" \"Atlantic Coast Conference\" \"Atlantic Coast Conference\" \"Big Ten Conference\" ...\n $ TotalPlays    : int [1:14] 855 776 891 846 829 875 754 727 767 309 ...\n $ TotalYards    : int [1:14] 4556 3417 5160 4447 4500 4911 3880 4458 4121 2042 ...\n $ DefensivePlays: int [1:14] 937 813 957 1040 906 980 896 843 903 402 ...\n $ DefensiveYards: int [1:14] 5486 4042 4867 5671 5054 5552 5033 4685 5396 2146 ...\n $ TotalWins     : num [1:14] 2 4 7 7 3 6 4 5 3 2 ...\n $ OffensiveYPP  : num [1:14] 5.33 4.4 5.79 5.26 5.43 ...\n $ DefensiveYPP  : num [1:14] 5.85 4.97 5.09 5.45 5.58 ...\n - attr(*, \"groups\")= tibble [14 × 3] (S3: tbl_df/tbl/data.frame)\n  ..$ Season: int [1:14] 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 ...\n  ..$ Team  : chr [1:14] \"Maryland\" \"Maryland\" \"Maryland\" \"Maryland\" ...\n  ..$ .rows : list&lt;int&gt; [1:14] \n  .. ..$ : int 1\n  .. ..$ : int 2\n  .. ..$ : int 3\n  .. ..$ : int 4\n  .. ..$ : int 5\n  .. ..$ : int 6\n  .. ..$ : int 7\n  .. ..$ : int 8\n  .. ..$ : int 9\n  .. ..$ : int 10\n  .. ..$ : int 11\n  .. ..$ : int 12\n  .. ..$ : int 13\n  .. ..$ : int 14\n  .. ..@ ptype: int(0) \n  ..- attr(*, \".drop\")= logi TRUE\n\n\nCode\nstr(nationalavg)\n\n\ntibble [14 × 4] (S3: tbl_df/tbl/data.frame)\n $ Season         : int [1:14] 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 ...\n $ AvgOffensiveYPP: num [1:14] 5.59 5.68 5.69 5.67 5.71 ...\n $ AvgDefensiveYPP: num [1:14] 5.48 5.55 5.61 5.57 5.59 ...\n $ AvgWins        : num [1:14] 6.72 6.69 6.61 6.69 6.73 ...\n\n\nCode\nggplot() + \n  geom_point(\n    data = umd, \n    aes(x = Season, y = OffensiveYPP, size = TotalWins, color = \"UMD\"),  # Map color to UMD\n    alpha = 0.6  \n  ) + \n  geom_point(\n    data = nationalavg, \n    aes(x = Season, y = AvgOffensiveYPP, size = AvgDefensiveYPP, color = \"National Average\"),  \n    alpha = 0.6  \n  ) + \n  geom_vline(\n    xintercept = 2019, \n    linetype = \"dashed\", \n    color = \"red\", \n    size = 1\n  ) +\n  labs(\n    title = \"The Terps have started to produce above the national average under Locksley\", \n    x = \"Season\", \n    y = \"Offensive Yards Per Play\",\n    size = \"Wins\",\n    color = \"Team\" \n  ) +  \n  scale_color_manual(values = c(\"UMD\" = \"red\", \"National Average\" = \"black\"))\n\n\n\n\n\n\n\n\n\nWhile calls for Locksley’s firing have died down after a crucial win against USC, many quickly forget Maryland’s past, one that falls behind the National Average, and fails to produce well on the offensive side of the ball. While post Tualia the Terps are trying to find their idenity, head coaching might not be the issue."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Big Ten CFB Averages",
    "section": "",
    "text": "In 2024, there has been several clock rule changes, including the two minute warning, changes to first down timing and untimed down scenarios. To see if there is any difference in plays among Big Ten teams, we need to collect the data.\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ngames2023 &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\ngames2024 &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\nIn both samples, I want to filter for the Big Ten, to do this, you can add the filter function for both years with a list of the Big Ten Schools. At the same time, I want to add a season to show which season each is in. You can do that by mutating a season column and putting in the years the data is from. Finally, because it is October 8th in 2024, this data isn’t complete for 2023, so I want to filter games only up to October 8th for 2023.\nCode\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins\")\nBigTengames2023 &lt;- games2023 |&gt; filter(TeamFull %in% big10) |&gt; mutate(Season = 2023) |&gt; filter(Date &gt; \"2023-10-8\")\nBigTengames2024 &lt;- games2024|&gt; filter(TeamFull %in% big10) |&gt; mutate(Season = 2024)\nNow I want a dataset with all plays from these games listed above. You can bind both 2023 and 2024 together to get one full dataset, and then use Group_By to seperate the teams and the seasons.\nCode\nmerged_data &lt;- rbind(BigTengames2023,BigTengames2024)\nBigTen &lt;- merged_data |&gt; \n  group_by(Season,TeamFull) |&gt; \n  summarise(\n    plays = sum(OffensivePlays)\n  )\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\nBigTen |&gt; arrange(desc(plays))\n\n\n# A tibble: 28 × 3\n# Groups:   Season [2]\n   Season TeamFull                 plays\n    &lt;dbl&gt; &lt;chr&gt;                    &lt;int&gt;\n 1   2023 Michigan Wolverines        433\n 2   2024 Indiana Hoosiers           406\n 3   2024 Nebraska Cornhuskers       393\n 4   2023 Iowa Hawkeyes              383\n 5   2024 Minnesota Golden Gophers   368\n 6   2024 Maryland Terrapins         363\n 7   2024 Michigan State Spartans    363\n 8   2024 Michigan Wolverines        360\n 9   2023 Wisconsin Badgers          348\n10   2024 Wisconsin Badgers          346\n# ℹ 18 more rows\nYou can see at the top of the chart is 2023 Michigan at this point of the year in 2023, but most of the teams are from 2024. We can visualize this by making a stacked bar chart for each team and seeing how the plays differ for each year.\nCode\nBigTen$Season &lt;- factor(BigTen$Season, levels = c(\"2024\", \"2023\"))\nggplot() + \n  geom_bar(data=BigTen, aes(x=TeamFull, weight=plays, fill=Season)) +\n  coord_flip()\nAs you can see, a lot of teams saw a Big jump in plays due to the rule changes. Illinois barely cracked 250 plays in 2023, but is well over 300 in 2024. Same can be said for Michigan State, Nebraska and Purdue, who are all closer to 400 plays than 200, something that differs a lot from 2023. Indiana, a team that wasn’t leading the race in 2023, is suddenly close to the top in 2024. For some teams it looks about equal, which is shown if you get rid of the teams and look at the overall play count. If you want to see the total number of plays by season without the team differentials.\nCode\nggplot() + \n  geom_bar(data=BigTen, aes(x=Season, weight=plays))"
  },
  {
    "objectID": "index.html#the-difference-is-100-there-but-its-around-500-or-so-plays-split-between-14-teams.-so-on-average-theres-about-35-extra-plays-on-offense-through-six-games-or-so.",
    "href": "index.html#the-difference-is-100-there-but-its-around-500-or-so-plays-split-between-14-teams.-so-on-average-theres-about-35-extra-plays-on-offense-through-six-games-or-so.",
    "title": "Big Ten CFB Averages",
    "section": "The difference is 100% there, but it’s around 500 or so plays split between 14 teams. So on average there’s about 35 extra plays on offense through six games or so.",
    "text": "The difference is 100% there, but it’s around 500 or so plays split between 14 teams. So on average there’s about 35 extra plays on offense through six games or so."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  }
]